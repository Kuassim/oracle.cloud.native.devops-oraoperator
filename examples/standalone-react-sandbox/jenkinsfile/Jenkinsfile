def frontend    = null

pipeline {
    agent any
    tools {
        maven "maven3"
    }
    environment {
        // Registry
        ocir_credentials_id = ""
        region = ""
        registry = "${region}.ocir.io"
        http_registry = "https://${registry}"
        namespace = ""

        // Repository
        repository = ""
        branch = ""

        // Directory
        root = "examples"

        // Locations
        frontend_directory = "standalone-react-sandbox/app"

        // Images and Containers
        frontend_name = "react-test-sandbox"

        // Deployments
        frontend_deployment = "react-sandbox-deployment"

        // Kubernetes
        kube_cluster_name = ""
        kube_cluster_credentials_id = ""
        kube_cluster_namespace = "default"
        kube_cluster_serviceaccount_namespace = "kube-system"
        kube_cluster_server_url =   ""
    }

    stages {
        stage("checkout") {
            steps {
                git branch: branch, url: repository
            }
        }
        stage("build-push-deploy") {
            parallel {
                stage("update-frontend") {
                    when {
                        changeset "${root}/${frontend_directory}/**"
                        beforeAgent true
                    }
                    stages {
                        stage("build-and-push-frontend-helidon") {
                            steps {
                                script {
                                    env.full_image = dkr_build(frontend_name)
                                    push(env.full_image)
                                }
                            }
                        }
                        stage("deploy-frontend-helidon") {
                            steps {
                                script {
                                    deploy(frontend_deployment, frontend_name, env.full_image)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def getVersion(location=".") {
    dir(location) {
        version = readFile "version.txt"
        return version
    }
}

def dkr_build(location, repository) {
    dir("${root}/${location}") {
        env.IMAGE_VERSION = getVersion("${root}/${location}")
        env.DOCKER_REGISTRY = "${registry}/${namespace}"
        full_image = "${registry}/${namespace}/${repository}:${env.IMAGE_VERSION}"
        sh "docker build -t ${full_image} ."
        return full_image
    }
}

def mvn_build(repository) {
    dir("${root}/${repository}") {
        env.IMAGE_VERSION = getVersion()
        env.DOCKER_REGISTRY = "${registry}/${namespace}"
        full_image = "${registry}/${namespace}/${repository}:${env.IMAGE_VERSION}"
        sh "mvn package"
        return full_image
    }
}

def push(image) {
    withDockerRegistry(credentialsId: ocir_credentials_id, url: http_registry) {
        sh "docker push ${image}"
        sh "docker rmi ${image}"
    }
}

def deploy(deployment, container, image){

    withKubeCredentials(kubectlCredentials: [[
    caCertificate: '',
    clusterName: kube_cluster_name,
    contextName: '',
    credentialsId: kube_cluster_credentials_id,
    namespace: kube_cluster_serviceaccount_namespace,
    serverUrl: kube_cluster_server_url
    ]]) {
        sh "kubectl config set-context --current --namespace=${kube_cluster_namespace}"
        sh "kubectl set image deployment/${deployment} ${container}=${image}"
    }
}